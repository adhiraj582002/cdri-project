# -*- coding: utf-8 -*-
"""1(a+b) combined.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FMjfRtIlIQm8u1_iyiX7CT7Wl1h1m6n7
"""

!pip install chembl_webresource_client

import pandas as pd
from chembl_webresource_client.new_client import new_client

target = new_client.target
target_query = target.search('Dopamine receptor')
targets = pd.DataFrame.from_dict(target_query)

targets

selected_target = targets.target_chembl_id[0]

activity = new_client.activity
res = activity.filter(target_chembl_id=selected_target).filter(standard_type="IC50")

res

# Convert QuerySet to a list of dictionaries
data_list = list(res)

# Convert the list of dictionaries to a Pandas DataFrame
res_df = pd.DataFrame(data_list)

# Convert res DataFrame to CSV and save it
res_df.to_csv('activity_data.csv', index=False)

print("Activity data saved to 'activity_data.csv'")

df=pd.read_csv("/content/activity_data.csv")
df2=df[df.standard_value.notna()]
df2=df2[df.canonical_smiles.notna()]
df2

len(df2.canonical_smiles.unique())

df2_nr=df2.drop_duplicates(['canonical_smiles'])
df2_nr

selection={'molecule_chembl_id','canonical_smiles','standard_value'}
df3=df2_nr[selection]
df3

df3.to_csv('DopamineReceptor_bioactivity data_02.csv', index=False)

df4 = pd.read_csv('DopamineReceptor_bioactivity data_02.csv')

df4

bioactivty_threshold=[]
for i in df4.standard_value:
  if float(i)>=10000:
    bioactivty_threshold.append("append")
  elif float(i)<= 1000:
    bioactivty_threshold.append("active")
  else:
    bioactivty_threshold.append("intermediate")

bioactivity_class=pd.Series(bioactivty_threshold, name='class')
df5=pd.concat([df4, bioactivity_class], axis=1)
df5

df5.to_csv('DopamineReceptor_bioactivity data_03.csv')

! wget https://repo.anaconda.com/miniconda/Miniconda3-py37_4.8.2-Linux-x86_64.sh
! chmod +x Miniconda3-py37_4.8.2-Linux-x86_64.sh
! bash ./Miniconda3-py37_4.8.2-Linux-x86_64.sh -b -f -p /usr/local
! conda install -c rdkit rdkit -y
! pip install deepchem
import sys
sys.path.append('/usr/local/lib/python3.7/site-packages/')

import pandas as pd

df6=pd.read_csv('/content/DopamineReceptor_bioactivity data_03.csv')
df6

df6_no_smiles = df6.drop(columns='canonical_smiles')

smiles = []

for i in df6.canonical_smiles.tolist():
  cpd = str(i).split('.')
  cpd_longest = max(cpd, key = len)
  smiles.append(cpd_longest)

smiles = pd.Series(smiles, name = 'canonical_smiles')

df6_clean_smiles = pd.concat([df6_no_smiles,smiles], axis=1)
df6_clean_smiles

import numpy as np
from rdkit import Chem
from rdkit.Chem import Descriptors, Lipinski

def lipinski(smiles, verbose=False):

    moldata= []
    for elem in smiles:
        mol=Chem.MolFromSmiles(elem)
        moldata.append(mol)

    baseData= np.arange(1,1)
    i=0
    for mol in moldata:

        desc_MolWt = Descriptors.MolWt(mol)
        desc_MolLogP = Descriptors.MolLogP(mol)
        desc_NumHDonors = Lipinski.NumHDonors(mol)
        desc_NumHAcceptors = Lipinski.NumHAcceptors(mol)

        row = np.array([desc_MolWt,
                        desc_MolLogP,
                        desc_NumHDonors,
                        desc_NumHAcceptors])

        if(i==0):
            baseData=row
        else:
            baseData=np.vstack([baseData, row])
        i=i+1

    columnNames=["MW","LogP","NumHDonors","NumHAcceptors"]
    descriptors = pd.DataFrame(data=baseData,columns=columnNames)

    return descriptors

df6_lipinski = lipinski(df6_clean_smiles.canonical_smiles)
df6_lipinski

df6

df6_combined = pd.concat([df6,df6_lipinski], axis=1)

df6_combined

def pIC50(input):
    pIC50 = []

    for i in input['standard_value_norm']:
        molar = i*(10**-9) # Converts nM to M
        pIC50.append(-np.log10(molar))

    input['pIC50'] = pIC50
    x = input.drop('standard_value_norm', 1)

    return x

df6_combined.standard_value.describe()

def norm_value(input):
    norm = []

    for i in input['standard_value']:
        if i > 100000000:
          i = 100000000
        norm.append(i)

    input['standard_value_norm'] = norm
    x = input.drop('standard_value', 1)

    return x

df6_norm = norm_value(df6_combined)
df6_norm

df6_norm.standard_value_norm.describe()

df6_final = pIC50(df6_norm)
df6_final

df6_final.pIC50.describe()

df6_final.to_csv('DopamineReceptor_bioactivity data_04.csv')

df6_2class = df6_final[df6_final['class'] != 'intermediate']
df6_2class

df6_2class.to_csv('DopamineReceptor_bioactivity data_05.csv')

import seaborn as sns
sns.set(style='ticks')
import matplotlib.pyplot as plt

plt.figure(figsize=(5.5, 5.5))

sns.countplot(x='class', data=df6_2class, edgecolor='black')

plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')
plt.ylabel('Frequency', fontsize=14, fontweight='bold')

plt.savefig('plot_bioactivity_class.pdf')

plt.figure(figsize=(5.5, 5.5))

sns.scatterplot(x='MW', y='LogP', data=df6_2class, hue='class', size='pIC50', edgecolor='black', alpha=0.7)

plt.xlabel('MW', fontsize=14, fontweight='bold')
plt.ylabel('LogP', fontsize=14, fontweight='bold')
plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0)
plt.savefig('plot_MW_vs_LogP.pdf')

plt.figure(figsize=(5.5, 5.5))

sns.boxplot(x = 'class', y = 'pIC50', data = df6_2class)

plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')
plt.ylabel('pIC50 value', fontsize=14, fontweight='bold')

plt.savefig('plot_ic50.pdf')

def mannwhitney(descriptor, verbose=False):

  from numpy.random import seed
  from numpy.random import randn
  from scipy.stats import mannwhitneyu

# seed the random number generator
  seed(1)

# actives and inactives
  selection = [descriptor, 'class']
  df = df6_2class[selection]
  active = df[df['class'] == 'active']
  active = active[descriptor]

  selection = [descriptor, 'class']
  df = df6_2class[selection]
  inactive = df6[df6['class'] == 'inactive']
  inactive = inactive[descriptor]

# compare samples
  stat, p = mannwhitneyu(active, inactive)
  #print('Statistics=%.3f, p=%.3f' % (stat, p))

# interpret
  alpha = 0.05
  if p > alpha:
    interpretation = 'Same distribution (fail to reject H0)'
  else:
    interpretation = 'Different distribution (reject H0)'

  results = pd.DataFrame({'Descriptor':descriptor,
                          'Statistics':stat,
                          'p':p,
                          'alpha':alpha,
                          'Interpretation':interpretation}, index=[0])
  filename = 'mannwhitneyu_' + descriptor + '.csv'
  results.to_csv(filename)

  return results

mannwhitney('pIC50')

plt.figure(figsize=(5.5, 5.5))

sns.boxplot(x = 'class', y = 'MW', data = df6_2class)

plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')
plt.ylabel('MW', fontsize=14, fontweight='bold')

plt.savefig('plot_MW.pdf')

mannwhitney('MW')

df6_2class

print(df6_2class.columns)
print(df6_2class.head())

plt.figure(figsize=(5.5, 5.5))

sns.boxplot(x = 'class', y = 'LogP', data = df6_2class)

plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')
plt.ylabel('LogP', fontsize=14, fontweight='bold')

plt.savefig('plot_LogP.pdf')

mannwhitney('LogP')

plt.figure(figsize=(5.5, 5.5))

sns.boxplot(x = 'class', y = 'NumHDonors', data = df6_2class)

plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')
plt.ylabel('NumHDonors', fontsize=14, fontweight='bold')

plt.savefig('plot_NumHDonors.pdf')

mannwhitney('NumHDonors')

plt.figure(figsize=(5.5, 5.5))

sns.boxplot(x = 'class', y = 'NumHAcceptors', data = df6_2class)

plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')
plt.ylabel('NumHAcceptors', fontsize=14, fontweight='bold')

plt.savefig('plot_NumHAcceptors.pdf')

mannwhitney('NumHAcceptors')

! zip -r results.zip . -i *.csv *.pdf

